generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  idUser   String     @id @db.Uuid
  name     String     @db.VarChar(20)
  email    String     @db.VarChar(50)
  userName String     @unique @db.VarChar(20)
  password String     @db.VarChar(20)
  tweet    Tweet[]
  like     Like[]
  reTweet  ReTweet[]
  follows  Follower[] @relation("user_follows")
  followed Follower[] @relation("user_followed")

  @@map("user")
}

model Tweet {
  idTweet String    @id @db.Uuid
  content String
  idUser  String    @db.Uuid
  ReTweet ReTweet[]
  like    Like[]

  User User @relation(fields: [idUser], references: [idUser])

  @@map("tweet")
}

model ReTweet {
  idReTweet String  @id @db.Uuid
  idTweet   String  @db.Uuid
  idUser    String  @db.Uuid
  content   String?

  Tweet Tweet @relation(fields: [idTweet], references: [idTweet])
  user  User  @relation(fields: [idUser], references: [idUser])

  @@map("reTweet")
}

model Follower {
  idUserFollows  String @db.Uuid
  idUserFollowed String @db.Uuid

  follows  User @relation("user_follows", fields: [idUserFollows], references: [idUser])
  followed User @relation("user_followed", fields: [idUserFollowed], references: [idUser])

  @@id([idUserFollows, idUserFollowed], name: "follow_pkey")
  @@map("follower")
}

model Like {
  idLike  String @id @db.Uuid
  idUser  String @db.Uuid
  idTweet String @db.Uuid

  Tweet Tweet @relation(fields: [idTweet], references: [idTweet])
  user  User  @relation(fields: [idUser], references: [idUser])

  @@map("like")
}